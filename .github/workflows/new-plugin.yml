name: new-plugin
on:
  push:
    branches:
      - "main"
    paths:
      - "plugins/**"

# Prevent running this workflow concurrently
concurrency:
  group: "matrix-messages"

jobs:
  setup:
    name: Collect metadata and setup job matrix
    runs-on: ubuntu-latest
    timeout-minutes: 40
    if: github.repository == 'nix-community/nixvim'

    outputs:
      plugins: ${{ steps.get_info.outputs.json }}
      pr_number: ${{ steps.pr.outputs.number }}
      pr_url: ${{ steps.get_pr.outputs.url }}
      pr_author_name: ${{ steps.get_pr.outputs.author_name }}
      pr_author_url: ${{ steps.get_pr.outputs.author_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get plugins info
        id: get_info
        run: |
          # Run the `plugin-info` tool, printing the result to write to GITHUB_OUTPUT
          echo "json=$(
            nix run .#plugin-info -- \
              --old 'github:${{ github.repository }}/${{ github.event.before }}'
          )" >> $GITHUB_OUTPUT

      - name: Get PR info
        id: get_pr
        if: steps.get_info.outputs.json != '[]'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # `gh` will have already printed to stderr, so no need to parse the response json
          JSON=$(
            gh api  \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/commits/${{ github.sha }}/pulls
          ) || exit 1

          if [[ "$(echo "$JSON" | jq -c '.')" = "[]" ]]; then
            # No associated PR
            # TODO: does this need special handling?
          else
            # Print key=value pairs to GITHUB_OUTPUT
            echo "$JSON" | \
              jq -r '.[0] | { number: .number, url: .html_url, author_name: .user.login, author_url: .user.html_url } | to_entries[] | "\(.key)=\(.value)"' \
              >> $GITHUB_OUTPUT
          fi

  send:
    name: Send matrix message
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        plugins: ${{ fromJSON(needs.setup.outputs.plugins) }}
    env:
      name: ${{ matrix.plugins.name }}
      type: ${{ matrix.plugins.type }}
      change: ${{ matrix.plugins.change }}
      pr_number: ${{ needs.setup.outputs.pr_number }}
      pr_url: ${{ needs.setupt_pr.outputs.pr_url }}
      pr_author_name: ${{ needs.setupt_pr.outputs.pr_author_name }}
      pr_author_url: ${{ needs.setupt_pr.outputs.pr_author_url }}

    steps:
      - name: Install matrix-msg tool
        uses: lkiesow/matrix-notification@v1
        with:
          token: ${{ secrets.CI_MATRIX_TOKEN }}
          server: ${{ secrets.CI_MATRIX_SERVER }}
          room: ${{ secrets.CI_MATRIX_ROOM }}
          tool: true

      - name: Send message and print summary
        run: |
          # Message text; plain-text & html
          # TODO: format as-per existing announcements
          # See available env-vars above
          msg="Hello, world!"
          html_msg="
          <p>[ðŸ’¾ NEW PLUGIN]</p>
          <p><a href=\"https://github.com/OXY2DEV/helpview.nvim\">helpview.nvim</a> support has been added !</p>
          <p>Description:  Decorations for vimdoc/help files in Neovim.<br><a href=\"https://nix-community.github.io/nixvim/plugins/helpview/index.html\">Documentation</a><br><a href=\"https://github.com/nix-community/nixvim/pull/2259\">PR</a> by <a href=\"https://github.com/khaneliman\">khaneliman</a></p>
          "

          # stdout
          echo "$msg"

          # markdown summary
          echo "$html_msg" >> $GITHUG_STEP_SUMMARY

          # matrix message
          matrix-msg "$msg" "$html_msg"
          # TODO: update stdout/step_summary with msg success/failure
